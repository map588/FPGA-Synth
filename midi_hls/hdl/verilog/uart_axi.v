// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="uart_axi_uart_axi,hls_ip_2021_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=1000.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.407300,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=189,HLS_SYN_LUT=498,HLS_VERSION=2021_1}" *)

module uart_axi (
        ap_clk,
        ap_rst_n,
        rx_pin,
        first_bit,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [0:0] rx_pin;
output   first_bit;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

reg first_bit;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [23:0] data_out;
reg    data_out_ap_vld;
reg    valid;
reg    valid_ap_vld;
wire    reset;
reg   [4:0] sample_count_V;
reg   [7:0] current_byte_V;
reg   [15:0] accumulated_data_V;
reg   [1:0] byte_count_V;
reg   [1:0] state;
reg   [3:0] bit_count_V;
reg   [13:0] sample_buffer;
wire   [0:0] reset_read_read_fu_138_p2;
reg   [0:0] reset_read_reg_755;
reg   [7:0] current_byte_V_load_reg_759;
wire   [4:0] add_ln870_fu_461_p2;
wire   [1:0] state_load_load_fu_468_p1;
reg   [1:0] state_load_reg_780;
wire   [0:0] grp_fu_374_p2;
reg   [0:0] icmp_ln1049_3_reg_784;
wire   [0:0] icmp_ln1065_fu_514_p2;
reg   [0:0] icmp_ln1065_reg_788;
reg   [15:0] ap_phi_mux_accumulated_data_V_new_0_phi_fu_179_p4;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln1049_7_fu_725_p2;
wire   [15:0] ret_cast_fu_706_p3;
reg   [1:0] ap_phi_mux_byte_count_V_new_0_phi_fu_189_p4;
wire   [1:0] add_ln870_8_fu_719_p2;
reg   [0:0] ap_phi_mux_accumulated_data_V_flag_1_phi_fu_200_p4;
reg   [0:0] accumulated_data_V_flag_1_reg_196;
reg   [15:0] ap_phi_mux_accumulated_data_V_new_1_phi_fu_212_p4;
reg   [15:0] accumulated_data_V_new_1_reg_208;
reg   [1:0] ap_phi_mux_byte_count_V_new_1_phi_fu_224_p4;
reg   [1:0] byte_count_V_new_1_reg_220;
reg   [4:0] ap_phi_mux_sample_count_V_new_4_phi_fu_236_p20;
reg   [4:0] sample_count_V_new_4_reg_232;
wire   [0:0] icmp_ln1049_fu_660_p2;
reg   [0:0] ap_phi_mux_accumulated_data_V_flag_3_phi_fu_268_p20;
reg   [0:0] accumulated_data_V_flag_3_reg_263;
reg   [15:0] ap_phi_mux_accumulated_data_V_new_3_phi_fu_305_p20;
reg   [15:0] accumulated_data_V_new_3_reg_300;
reg   [1:0] ap_phi_mux_byte_count_V_new_3_phi_fu_342_p20;
reg   [1:0] byte_count_V_new_3_reg_337;
wire   [7:0] or_ln_fu_578_p3;
wire   [0:0] icmp_ln1049_4_fu_630_p2;
wire   [0:0] icmp_ln1049_5_fu_608_p2;
wire   [3:0] add_ln870_4_fu_596_p2;
wire   [13:0] ret_2_cast_cast_fu_447_p3;
reg    first_bit_preg;
wire   [0:0] icmp_ln1049_6_fu_714_p2;
wire   [23:0] ret_fu_699_p3;
wire   [6:0] trunc_ln1528_fu_431_p1;
wire   [12:0] trunc_ln1528_1_fu_443_p1;
wire   [0:0] grp_fu_379_p3;
wire   [0:0] grp_fu_386_p3;
wire   [0:0] grp_fu_393_p3;
wire   [0:0] grp_fu_400_p3;
wire   [1:0] zext_ln1676_2_fu_476_p1;
wire   [1:0] zext_ln1676_3_fu_480_p1;
wire   [1:0] add_ln870_5_fu_488_p2;
wire   [1:0] zext_ln16_1_fu_472_p1;
wire   [1:0] zext_ln870_5_fu_484_p1;
wire   [1:0] add_ln870_6_fu_498_p2;
wire   [2:0] zext_ln870_3_fu_504_p1;
wire   [2:0] zext_ln870_2_fu_494_p1;
wire   [2:0] ones_V_3_fu_508_p2;
wire   [1:0] zext_ln1676_fu_524_p1;
wire   [1:0] zext_ln1676_1_fu_528_p1;
wire   [1:0] add_ln870_1_fu_536_p2;
wire   [1:0] zext_ln16_fu_520_p1;
wire   [1:0] zext_ln870_4_fu_532_p1;
wire   [1:0] add_ln870_2_fu_546_p2;
wire   [2:0] zext_ln870_1_fu_552_p1;
wire   [2:0] zext_ln870_fu_542_p1;
wire   [2:0] ones_V_1_fu_556_p2;
wire   [0:0] bit_value_fu_562_p2;
wire   [6:0] r_fu_568_p4;
wire   [3:0] middle_samples_fu_620_p4;
wire   [7:0] ret_2_cast5_fu_435_p3;
wire   [7:0] trunc_ln1528_2_fu_696_p1;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_condition_135;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 sample_count_V = 5'd0;
#0 current_byte_V = 8'd0;
#0 accumulated_data_V = 16'd0;
#0 byte_count_V = 2'd0;
#0 state = 2'd0;
#0 bit_count_V = 4'd0;
#0 sample_buffer = 14'd0;
#0 first_bit_preg = 1'b0;
end

uart_axi_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .data_out(data_out),
    .data_out_ap_vld(data_out_ap_vld),
    .valid(valid),
    .valid_ap_vld(valid_ap_vld),
    .reset(reset),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1065_reg_788 == 1'd1) & (icmp_ln1049_3_reg_784 == 1'd1) & (state_load_reg_780 == 2'd3) & (reset_read_reg_755 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        accumulated_data_V_flag_1_reg_196 <= 1'd1;
    end else if (((ap_start == 1'b1) & (icmp_ln1065_fu_514_p2 == 1'd0) & (grp_fu_374_p2 == 1'd1) & (state_load_load_fu_468_p1 == 2'd3) & (reset_read_read_fu_138_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accumulated_data_V_flag_1_reg_196 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1049_3_reg_784 == 1'd1) & (state_load_reg_780 == 2'd3) & (reset_read_reg_755 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        accumulated_data_V_flag_3_reg_263 <= ap_phi_mux_accumulated_data_V_flag_1_phi_fu_200_p4;
    end else if (((ap_start == 1'b1) & (reset_read_read_fu_138_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        accumulated_data_V_flag_3_reg_263 <= 1'd1;
    end else if ((((ap_start == 1'b1) & (grp_fu_374_p2 == 1'd1) & (state_load_load_fu_468_p1 == 2'd2) & (reset_read_read_fu_138_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start == 1'b1) & (grp_fu_374_p2 == 1'd1) & (state_load_load_fu_468_p1 == 2'd1) & (reset_read_read_fu_138_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start == 1'b1) & (grp_fu_374_p2 == 1'd0) & (state_load_load_fu_468_p1 == 2'd3) & (reset_read_read_fu_138_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start == 1'b1) & (grp_fu_374_p2 == 1'd0) & (state_load_load_fu_468_p1 == 2'd2) & (reset_read_read_fu_138_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start == 1'b1) & (grp_fu_374_p2 == 1'd0) & (state_load_load_fu_468_p1 == 2'd1) & (reset_read_read_fu_138_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start == 1'b1) & (state_load_load_fu_468_p1 == 2'd0) & (reset_read_read_fu_138_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln1049_fu_660_p2 == 1'd0)) | ((ap_start == 1'b1) & (state_load_load_fu_468_p1 == 2'd0) & (reset_read_read_fu_138_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln1049_fu_660_p2 == 1'd1)))) begin
        accumulated_data_V_flag_3_reg_263 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1049_3_reg_784 == 1'd1) & (state_load_reg_780 == 2'd3) & (reset_read_reg_755 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        accumulated_data_V_new_3_reg_300 <= ap_phi_mux_accumulated_data_V_new_1_phi_fu_212_p4;
    end else if (((ap_start == 1'b1) & (reset_read_read_fu_138_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        accumulated_data_V_new_3_reg_300 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_start == 1'b1) & (grp_fu_374_p2 == 1'd1) & (state_load_load_fu_468_p1 == 2'd1) & (reset_read_read_fu_138_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln1049_4_fu_630_p2 == 1'd1)) | ((ap_start == 1'b1) & (reset_read_read_fu_138_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)))) begin
        bit_count_V <= 4'd0;
    end else if (((ap_start == 1'b1) & (grp_fu_374_p2 == 1'd1) & (state_load_load_fu_468_p1 == 2'd2) & (reset_read_read_fu_138_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        bit_count_V <= add_ln870_4_fu_596_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1049_3_reg_784 == 1'd1) & (state_load_reg_780 == 2'd3) & (reset_read_reg_755 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        byte_count_V_new_3_reg_337 <= ap_phi_mux_byte_count_V_new_1_phi_fu_224_p4;
    end else if (((ap_start == 1'b1) & (reset_read_read_fu_138_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        byte_count_V_new_3_reg_337 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_start == 1'b1) & (grp_fu_374_p2 == 1'd1) & (state_load_load_fu_468_p1 == 2'd1) & (reset_read_read_fu_138_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln1049_4_fu_630_p2 == 1'd1)) | ((ap_start == 1'b1) & (reset_read_read_fu_138_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)))) begin
        current_byte_V <= 8'd0;
    end else if (((ap_start == 1'b1) & (grp_fu_374_p2 == 1'd1) & (state_load_load_fu_468_p1 == 2'd2) & (reset_read_read_fu_138_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        current_byte_V <= or_ln_fu_578_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((reset_read_read_fu_138_p2 == 1'd1)) begin
            sample_buffer <= 14'd0;
        end else if ((reset_read_read_fu_138_p2 == 1'd0)) begin
            sample_buffer <= ret_2_cast_cast_fu_447_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_start == 1'b1) & (grp_fu_374_p2 == 1'd1) & (state_load_load_fu_468_p1 == 2'd2) & (reset_read_read_fu_138_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start == 1'b1) & (grp_fu_374_p2 == 1'd1) & (state_load_load_fu_468_p1 == 2'd1) & (reset_read_read_fu_138_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start == 1'b1) & (reset_read_read_fu_138_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start == 1'b1) & (state_load_load_fu_468_p1 == 2'd0) & (reset_read_read_fu_138_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln1049_fu_660_p2 == 1'd1)) | ((icmp_ln1049_3_reg_784 == 1'd1) & (state_load_reg_780 == 2'd3) & (reset_read_reg_755 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        sample_count_V_new_4_reg_232 <= 5'd0;
    end else if ((((ap_start == 1'b1) & (grp_fu_374_p2 == 1'd0) & (state_load_load_fu_468_p1 == 2'd3) & (reset_read_read_fu_138_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start == 1'b1) & (grp_fu_374_p2 == 1'd0) & (state_load_load_fu_468_p1 == 2'd2) & (reset_read_read_fu_138_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start == 1'b1) & (grp_fu_374_p2 == 1'd0) & (state_load_load_fu_468_p1 == 2'd1) & (reset_read_read_fu_138_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start == 1'b1) & (state_load_load_fu_468_p1 == 2'd0) & (reset_read_read_fu_138_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln1049_fu_660_p2 == 1'd0)))) begin
        sample_count_V_new_4_reg_232 <= add_ln870_fu_461_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (state_load_load_fu_468_p1 == 2'd0) & (reset_read_read_fu_138_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln1049_fu_660_p2 == 1'd1))) begin
        state <= 2'd1;
    end else if (((ap_start == 1'b1) & (grp_fu_374_p2 == 1'd1) & (state_load_load_fu_468_p1 == 2'd1) & (reset_read_read_fu_138_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln1049_4_fu_630_p2 == 1'd1))) begin
        state <= 2'd2;
    end else if (((ap_start == 1'b1) & (grp_fu_374_p2 == 1'd1) & (state_load_load_fu_468_p1 == 2'd2) & (reset_read_read_fu_138_p2 == 1'd0) & (icmp_ln1049_5_fu_608_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        state <= 2'd3;
    end else if ((((ap_start == 1'b1) & (grp_fu_374_p2 == 1'd1) & (state_load_load_fu_468_p1 == 2'd1) & (reset_read_read_fu_138_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln1049_4_fu_630_p2 == 1'd0)) | ((ap_start == 1'b1) & (reset_read_read_fu_138_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln1049_3_reg_784 == 1'd1) & (state_load_reg_780 == 2'd3) & (reset_read_reg_755 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        state <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (ap_phi_mux_accumulated_data_V_flag_3_phi_fu_268_p20 == 1'd1))) begin
        accumulated_data_V <= ap_phi_mux_accumulated_data_V_new_3_phi_fu_305_p20;
        byte_count_V <= ap_phi_mux_byte_count_V_new_3_phi_fu_342_p20;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1065_reg_788 == 1'd1) & (icmp_ln1049_3_reg_784 == 1'd1) & (state_load_reg_780 == 2'd3) & (reset_read_reg_755 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        accumulated_data_V_new_1_reg_208 <= ap_phi_mux_accumulated_data_V_new_0_phi_fu_179_p4;
        byte_count_V_new_1_reg_220 <= ap_phi_mux_byte_count_V_new_0_phi_fu_189_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        current_byte_V_load_reg_759 <= current_byte_V;
        reset_read_reg_755 <= reset;
    end
end

always @ (posedge ap_clk) begin
    if (((state_load_load_fu_468_p1 == 2'd3) & (reset_read_read_fu_138_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        icmp_ln1049_3_reg_784 <= grp_fu_374_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_fu_374_p2 == 1'd1) & (state_load_load_fu_468_p1 == 2'd3) & (reset_read_read_fu_138_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        icmp_ln1065_reg_788 <= icmp_ln1065_fu_514_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sample_count_V <= ap_phi_mux_sample_count_V_new_4_phi_fu_236_p20;
    end
end

always @ (posedge ap_clk) begin
    if (((reset_read_read_fu_138_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        state_load_reg_780 <= state;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1065_reg_788 == 1'd1) & (icmp_ln1049_3_reg_784 == 1'd1) & (state_load_reg_780 == 2'd3) & (reset_read_reg_755 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_phi_mux_accumulated_data_V_flag_1_phi_fu_200_p4 = 1'd1;
    end else begin
        ap_phi_mux_accumulated_data_V_flag_1_phi_fu_200_p4 = accumulated_data_V_flag_1_reg_196;
    end
end

always @ (*) begin
    if (((icmp_ln1049_3_reg_784 == 1'd1) & (state_load_reg_780 == 2'd3) & (reset_read_reg_755 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_phi_mux_accumulated_data_V_flag_3_phi_fu_268_p20 = ap_phi_mux_accumulated_data_V_flag_1_phi_fu_200_p4;
    end else begin
        ap_phi_mux_accumulated_data_V_flag_3_phi_fu_268_p20 = accumulated_data_V_flag_3_reg_263;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_135)) begin
        if ((icmp_ln1049_7_fu_725_p2 == 1'd0)) begin
            ap_phi_mux_accumulated_data_V_new_0_phi_fu_179_p4 = ret_cast_fu_706_p3;
        end else if ((icmp_ln1049_7_fu_725_p2 == 1'd1)) begin
            ap_phi_mux_accumulated_data_V_new_0_phi_fu_179_p4 = 16'd0;
        end else begin
            ap_phi_mux_accumulated_data_V_new_0_phi_fu_179_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_accumulated_data_V_new_0_phi_fu_179_p4 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln1065_reg_788 == 1'd1) & (icmp_ln1049_3_reg_784 == 1'd1) & (state_load_reg_780 == 2'd3) & (reset_read_reg_755 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_phi_mux_accumulated_data_V_new_1_phi_fu_212_p4 = ap_phi_mux_accumulated_data_V_new_0_phi_fu_179_p4;
    end else begin
        ap_phi_mux_accumulated_data_V_new_1_phi_fu_212_p4 = accumulated_data_V_new_1_reg_208;
    end
end

always @ (*) begin
    if (((icmp_ln1049_3_reg_784 == 1'd1) & (state_load_reg_780 == 2'd3) & (reset_read_reg_755 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_phi_mux_accumulated_data_V_new_3_phi_fu_305_p20 = ap_phi_mux_accumulated_data_V_new_1_phi_fu_212_p4;
    end else begin
        ap_phi_mux_accumulated_data_V_new_3_phi_fu_305_p20 = accumulated_data_V_new_3_reg_300;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_135)) begin
        if ((icmp_ln1049_7_fu_725_p2 == 1'd0)) begin
            ap_phi_mux_byte_count_V_new_0_phi_fu_189_p4 = add_ln870_8_fu_719_p2;
        end else if ((icmp_ln1049_7_fu_725_p2 == 1'd1)) begin
            ap_phi_mux_byte_count_V_new_0_phi_fu_189_p4 = 2'd0;
        end else begin
            ap_phi_mux_byte_count_V_new_0_phi_fu_189_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_byte_count_V_new_0_phi_fu_189_p4 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln1065_reg_788 == 1'd1) & (icmp_ln1049_3_reg_784 == 1'd1) & (state_load_reg_780 == 2'd3) & (reset_read_reg_755 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_phi_mux_byte_count_V_new_1_phi_fu_224_p4 = ap_phi_mux_byte_count_V_new_0_phi_fu_189_p4;
    end else begin
        ap_phi_mux_byte_count_V_new_1_phi_fu_224_p4 = byte_count_V_new_1_reg_220;
    end
end

always @ (*) begin
    if (((icmp_ln1049_3_reg_784 == 1'd1) & (state_load_reg_780 == 2'd3) & (reset_read_reg_755 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_phi_mux_byte_count_V_new_3_phi_fu_342_p20 = ap_phi_mux_byte_count_V_new_1_phi_fu_224_p4;
    end else begin
        ap_phi_mux_byte_count_V_new_3_phi_fu_342_p20 = byte_count_V_new_3_reg_337;
    end
end

always @ (*) begin
    if (((icmp_ln1049_3_reg_784 == 1'd1) & (state_load_reg_780 == 2'd3) & (reset_read_reg_755 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_phi_mux_sample_count_V_new_4_phi_fu_236_p20 = 5'd0;
    end else begin
        ap_phi_mux_sample_count_V_new_4_phi_fu_236_p20 = sample_count_V_new_4_reg_232;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1065_reg_788 == 1'd1) & (icmp_ln1049_3_reg_784 == 1'd1) & (state_load_reg_780 == 2'd3) & (reset_read_reg_755 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln1049_7_fu_725_p2 == 1'd1))) begin
        data_out = ret_fu_699_p3;
    end else if (((ap_start == 1'b1) & (reset_read_read_fu_138_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        data_out = 24'd0;
    end else begin
        data_out = 'bx;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b1) & (reset_read_read_fu_138_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln1065_reg_788 == 1'd1) & (icmp_ln1049_3_reg_784 == 1'd1) & (state_load_reg_780 == 2'd3) & (reset_read_reg_755 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln1049_7_fu_725_p2 == 1'd1)))) begin
        data_out_ap_vld = 1'b1;
    end else begin
        data_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1065_reg_788 == 1'd1) & (icmp_ln1049_3_reg_784 == 1'd1) & (state_load_reg_780 == 2'd3) & (reset_read_reg_755 == 1'd0) & (icmp_ln1049_6_fu_714_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        first_bit = 1'd1;
    end else if ((((ap_start == 1'b1) & (reset_read_read_fu_138_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start == 1'b1) & (state_load_load_fu_468_p1 == 2'd0) & (reset_read_read_fu_138_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        first_bit = 1'd0;
    end else begin
        first_bit = first_bit_preg;
    end
end

always @ (*) begin
    if (((icmp_ln1065_reg_788 == 1'd1) & (icmp_ln1049_3_reg_784 == 1'd1) & (state_load_reg_780 == 2'd3) & (reset_read_reg_755 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln1049_7_fu_725_p2 == 1'd1))) begin
        valid = 1'd1;
    end else if ((((ap_start == 1'b1) & (reset_read_read_fu_138_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start == 1'b1) & (reset_read_read_fu_138_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)))) begin
        valid = 1'd0;
    end else begin
        valid = 'bx;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b1) & (reset_read_read_fu_138_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start == 1'b1) & (reset_read_read_fu_138_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln1065_reg_788 == 1'd1) & (icmp_ln1049_3_reg_784 == 1'd1) & (state_load_reg_780 == 2'd3) & (reset_read_reg_755 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln1049_7_fu_725_p2 == 1'd1)))) begin
        valid_ap_vld = 1'b1;
    end else begin
        valid_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln870_1_fu_536_p2 = (zext_ln1676_fu_524_p1 + zext_ln1676_1_fu_528_p1);

assign add_ln870_2_fu_546_p2 = (zext_ln16_fu_520_p1 + zext_ln870_4_fu_532_p1);

assign add_ln870_4_fu_596_p2 = (bit_count_V + 4'd1);

assign add_ln870_5_fu_488_p2 = (zext_ln1676_2_fu_476_p1 + zext_ln1676_3_fu_480_p1);

assign add_ln870_6_fu_498_p2 = (zext_ln16_1_fu_472_p1 + zext_ln870_5_fu_484_p1);

assign add_ln870_8_fu_719_p2 = (byte_count_V + 2'd1);

assign add_ln870_fu_461_p2 = (sample_count_V + 5'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_condition_135 = ((icmp_ln1065_reg_788 == 1'd1) & (icmp_ln1049_3_reg_784 == 1'd1) & (state_load_reg_780 == 2'd3) & (reset_read_reg_755 == 1'd0) & (1'b1 == ap_CS_fsm_state2));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bit_value_fu_562_p2 = ((ones_V_1_fu_556_p2 > 3'd2) ? 1'b1 : 1'b0);

assign grp_fu_374_p2 = ((add_ln870_fu_461_p2 == 5'd16) ? 1'b1 : 1'b0);

assign grp_fu_379_p3 = sample_buffer[32'd5];

assign grp_fu_386_p3 = sample_buffer[32'd6];

assign grp_fu_393_p3 = sample_buffer[32'd7];

assign grp_fu_400_p3 = sample_buffer[32'd8];

assign icmp_ln1049_4_fu_630_p2 = ((middle_samples_fu_620_p4 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln1049_5_fu_608_p2 = ((add_ln870_4_fu_596_p2 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln1049_6_fu_714_p2 = ((byte_count_V == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln1049_7_fu_725_p2 = ((add_ln870_8_fu_719_p2 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln1049_fu_660_p2 = ((ret_2_cast5_fu_435_p3 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln1065_fu_514_p2 = ((ones_V_3_fu_508_p2 > 3'd2) ? 1'b1 : 1'b0);

assign middle_samples_fu_620_p4 = {{sample_buffer[8:5]}};

assign ones_V_1_fu_556_p2 = (zext_ln870_1_fu_552_p1 + zext_ln870_fu_542_p1);

assign ones_V_3_fu_508_p2 = (zext_ln870_3_fu_504_p1 + zext_ln870_2_fu_494_p1);

assign or_ln_fu_578_p3 = {{bit_value_fu_562_p2}, {r_fu_568_p4}};

assign r_fu_568_p4 = {{current_byte_V[7:1]}};

assign reset_read_read_fu_138_p2 = reset;

assign ret_2_cast5_fu_435_p3 = {{trunc_ln1528_fu_431_p1}, {rx_pin}};

assign ret_2_cast_cast_fu_447_p3 = {{trunc_ln1528_1_fu_443_p1}, {rx_pin}};

assign ret_cast_fu_706_p3 = {{trunc_ln1528_2_fu_696_p1}, {current_byte_V_load_reg_759}};

assign ret_fu_699_p3 = {{accumulated_data_V}, {current_byte_V_load_reg_759}};

assign state_load_load_fu_468_p1 = state;

assign trunc_ln1528_1_fu_443_p1 = sample_buffer[12:0];

assign trunc_ln1528_2_fu_696_p1 = accumulated_data_V[7:0];

assign trunc_ln1528_fu_431_p1 = sample_buffer[6:0];

assign zext_ln1676_1_fu_528_p1 = grp_fu_393_p3;

assign zext_ln1676_2_fu_476_p1 = grp_fu_386_p3;

assign zext_ln1676_3_fu_480_p1 = grp_fu_393_p3;

assign zext_ln1676_fu_524_p1 = grp_fu_386_p3;

assign zext_ln16_1_fu_472_p1 = grp_fu_379_p3;

assign zext_ln16_fu_520_p1 = grp_fu_379_p3;

assign zext_ln870_1_fu_552_p1 = add_ln870_2_fu_546_p2;

assign zext_ln870_2_fu_494_p1 = add_ln870_5_fu_488_p2;

assign zext_ln870_3_fu_504_p1 = add_ln870_6_fu_498_p2;

assign zext_ln870_4_fu_532_p1 = grp_fu_400_p3;

assign zext_ln870_5_fu_484_p1 = grp_fu_400_p3;

assign zext_ln870_fu_542_p1 = add_ln870_1_fu_536_p2;

always @ (posedge ap_clk) begin
    first_bit_preg <= 1'b0;
end

endmodule //uart_axi
