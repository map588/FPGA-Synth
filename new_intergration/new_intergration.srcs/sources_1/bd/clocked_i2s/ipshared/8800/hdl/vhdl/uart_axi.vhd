-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity uart_axi is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    rx_pin : IN STD_LOGIC_VECTOR (0 downto 0);
    first_bit : OUT STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of uart_axi is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "uart_axi_uart_axi,hls_ip_2021_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=1000.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.407300,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=189,HLS_SYN_LUT=498,HLS_VERSION=2021_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal data_out : STD_LOGIC_VECTOR (23 downto 0);
    signal data_out_ap_vld : STD_LOGIC;
    signal valid : STD_LOGIC;
    signal valid_ap_vld : STD_LOGIC;
    signal reset : STD_LOGIC;
    signal sample_count_V : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal current_byte_V : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal accumulated_data_V : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal byte_count_V : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal bit_count_V : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal sample_buffer : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal reset_read_read_fu_138_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal reset_read_reg_755 : STD_LOGIC_VECTOR (0 downto 0);
    signal current_byte_V_load_reg_759 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln870_fu_461_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal state_load_load_fu_468_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal state_load_reg_780 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1049_3_reg_784 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1065_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1065_reg_788 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_accumulated_data_V_new_0_phi_fu_179_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln1049_7_fu_725_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_cast_fu_706_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_byte_count_V_new_0_phi_fu_189_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln870_8_fu_719_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_accumulated_data_V_flag_1_phi_fu_200_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal accumulated_data_V_flag_1_reg_196 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_accumulated_data_V_new_1_phi_fu_212_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal accumulated_data_V_new_1_reg_208 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_byte_count_V_new_1_phi_fu_224_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal byte_count_V_new_1_reg_220 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_sample_count_V_new_4_phi_fu_236_p20 : STD_LOGIC_VECTOR (4 downto 0);
    signal sample_count_V_new_4_reg_232 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln1049_fu_660_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_accumulated_data_V_flag_3_phi_fu_268_p20 : STD_LOGIC_VECTOR (0 downto 0);
    signal accumulated_data_V_flag_3_reg_263 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_accumulated_data_V_new_3_phi_fu_305_p20 : STD_LOGIC_VECTOR (15 downto 0);
    signal accumulated_data_V_new_3_reg_300 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_byte_count_V_new_3_phi_fu_342_p20 : STD_LOGIC_VECTOR (1 downto 0);
    signal byte_count_V_new_3_reg_337 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln_fu_578_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1049_4_fu_630_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1049_5_fu_608_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln870_4_fu_596_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ret_2_cast_cast_fu_447_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal first_bit_preg : STD_LOGIC := '0';
    signal icmp_ln1049_6_fu_714_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_fu_699_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln1528_fu_431_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln1528_1_fu_443_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_379_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_386_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_393_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_400_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln1676_2_fu_476_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln1676_3_fu_480_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln870_5_fu_488_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln16_1_fu_472_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln870_5_fu_484_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln870_6_fu_498_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln870_3_fu_504_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln870_2_fu_494_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal ones_V_3_fu_508_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln1676_fu_524_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln1676_1_fu_528_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln870_1_fu_536_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln16_fu_520_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln870_4_fu_532_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln870_2_fu_546_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln870_1_fu_552_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln870_fu_542_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal ones_V_1_fu_556_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal bit_value_fu_562_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_568_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal middle_samples_fu_620_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ret_2_cast5_fu_435_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1528_2_fu_696_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_condition_135 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component uart_axi_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        data_out : IN STD_LOGIC_VECTOR (23 downto 0);
        data_out_ap_vld : IN STD_LOGIC;
        valid : IN STD_LOGIC;
        valid_ap_vld : IN STD_LOGIC;
        reset : OUT STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    control_s_axi_U : component uart_axi_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        data_out => data_out,
        data_out_ap_vld => data_out_ap_vld,
        valid => valid,
        valid_ap_vld => valid_ap_vld,
        reset => reset,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    first_bit_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                
            else
            end if;
        end if;
    end process;


    accumulated_data_V_flag_1_reg_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1065_reg_788 = ap_const_lv1_1) and (icmp_ln1049_3_reg_784 = ap_const_lv1_1) and (state_load_reg_780 = ap_const_lv2_3) and (reset_read_reg_755 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                accumulated_data_V_flag_1_reg_196 <= ap_const_lv1_1;
            elsif (((ap_start = ap_const_logic_1) and (icmp_ln1065_fu_514_p2 = ap_const_lv1_0) and (grp_fu_374_p2 = ap_const_lv1_1) and (state_load_load_fu_468_p1 = ap_const_lv2_3) and (reset_read_read_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                accumulated_data_V_flag_1_reg_196 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    accumulated_data_V_flag_3_reg_263_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1049_3_reg_784 = ap_const_lv1_1) and (state_load_reg_780 = ap_const_lv2_3) and (reset_read_reg_755 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                accumulated_data_V_flag_3_reg_263 <= ap_phi_mux_accumulated_data_V_flag_1_phi_fu_200_p4;
            elsif (((ap_start = ap_const_logic_1) and (reset_read_read_fu_138_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                accumulated_data_V_flag_3_reg_263 <= ap_const_lv1_1;
            elsif ((((ap_start = ap_const_logic_1) and (grp_fu_374_p2 = ap_const_lv1_1) and (state_load_load_fu_468_p1 = ap_const_lv2_2) and (reset_read_read_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_start = ap_const_logic_1) and (grp_fu_374_p2 = ap_const_lv1_1) and (state_load_load_fu_468_p1 = ap_const_lv2_1) and (reset_read_read_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_start = ap_const_logic_1) and (grp_fu_374_p2 = ap_const_lv1_0) and (state_load_load_fu_468_p1 = ap_const_lv2_3) and (reset_read_read_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_start = ap_const_logic_1) and (grp_fu_374_p2 = ap_const_lv1_0) and (state_load_load_fu_468_p1 = ap_const_lv2_2) and (reset_read_read_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_start = ap_const_logic_1) and (grp_fu_374_p2 = ap_const_lv1_0) and (state_load_load_fu_468_p1 = ap_const_lv2_1) and (reset_read_read_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_start = ap_const_logic_1) and (state_load_load_fu_468_p1 = ap_const_lv2_0) and (reset_read_read_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln1049_fu_660_p2 = ap_const_lv1_0)) or ((ap_start = ap_const_logic_1) and (state_load_load_fu_468_p1 = ap_const_lv2_0) and (reset_read_read_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln1049_fu_660_p2 = ap_const_lv1_1)))) then 
                accumulated_data_V_flag_3_reg_263 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    accumulated_data_V_new_3_reg_300_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1049_3_reg_784 = ap_const_lv1_1) and (state_load_reg_780 = ap_const_lv2_3) and (reset_read_reg_755 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                accumulated_data_V_new_3_reg_300 <= ap_phi_mux_accumulated_data_V_new_1_phi_fu_212_p4;
            elsif (((ap_start = ap_const_logic_1) and (reset_read_read_fu_138_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                accumulated_data_V_new_3_reg_300 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    bit_count_V_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_start = ap_const_logic_1) and (grp_fu_374_p2 = ap_const_lv1_1) and (state_load_load_fu_468_p1 = ap_const_lv2_1) and (reset_read_read_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln1049_4_fu_630_p2 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_1) and (reset_read_read_fu_138_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                bit_count_V <= ap_const_lv4_0;
            elsif (((ap_start = ap_const_logic_1) and (grp_fu_374_p2 = ap_const_lv1_1) and (state_load_load_fu_468_p1 = ap_const_lv2_2) and (reset_read_read_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                bit_count_V <= add_ln870_4_fu_596_p2;
            end if; 
        end if;
    end process;

    byte_count_V_new_3_reg_337_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1049_3_reg_784 = ap_const_lv1_1) and (state_load_reg_780 = ap_const_lv2_3) and (reset_read_reg_755 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                byte_count_V_new_3_reg_337 <= ap_phi_mux_byte_count_V_new_1_phi_fu_224_p4;
            elsif (((ap_start = ap_const_logic_1) and (reset_read_read_fu_138_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                byte_count_V_new_3_reg_337 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    current_byte_V_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_start = ap_const_logic_1) and (grp_fu_374_p2 = ap_const_lv1_1) and (state_load_load_fu_468_p1 = ap_const_lv2_1) and (reset_read_read_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln1049_4_fu_630_p2 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_1) and (reset_read_read_fu_138_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                current_byte_V <= ap_const_lv8_0;
            elsif (((ap_start = ap_const_logic_1) and (grp_fu_374_p2 = ap_const_lv1_1) and (state_load_load_fu_468_p1 = ap_const_lv2_2) and (reset_read_read_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                current_byte_V <= or_ln_fu_578_p3;
            end if; 
        end if;
    end process;

    sample_buffer_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((reset_read_read_fu_138_p2 = ap_const_lv1_1)) then 
                    sample_buffer <= ap_const_lv14_0;
                elsif ((reset_read_read_fu_138_p2 = ap_const_lv1_0)) then 
                    sample_buffer <= ret_2_cast_cast_fu_447_p3;
                end if;
            end if; 
        end if;
    end process;

    sample_count_V_new_4_reg_232_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_start = ap_const_logic_1) and (grp_fu_374_p2 = ap_const_lv1_1) and (state_load_load_fu_468_p1 = ap_const_lv2_2) and (reset_read_read_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_start = ap_const_logic_1) and (grp_fu_374_p2 = ap_const_lv1_1) and (state_load_load_fu_468_p1 = ap_const_lv2_1) and (reset_read_read_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_start = ap_const_logic_1) and (reset_read_read_fu_138_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_start = ap_const_logic_1) and (state_load_load_fu_468_p1 = ap_const_lv2_0) and (reset_read_read_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln1049_fu_660_p2 = ap_const_lv1_1)) or ((icmp_ln1049_3_reg_784 = ap_const_lv1_1) and (state_load_reg_780 = ap_const_lv2_3) and (reset_read_reg_755 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
                sample_count_V_new_4_reg_232 <= ap_const_lv5_0;
            elsif ((((ap_start = ap_const_logic_1) and (grp_fu_374_p2 = ap_const_lv1_0) and (state_load_load_fu_468_p1 = ap_const_lv2_3) and (reset_read_read_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_start = ap_const_logic_1) and (grp_fu_374_p2 = ap_const_lv1_0) and (state_load_load_fu_468_p1 = ap_const_lv2_2) and (reset_read_read_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_start = ap_const_logic_1) and (grp_fu_374_p2 = ap_const_lv1_0) and (state_load_load_fu_468_p1 = ap_const_lv2_1) and (reset_read_read_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_start = ap_const_logic_1) and (state_load_load_fu_468_p1 = ap_const_lv2_0) and (reset_read_read_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln1049_fu_660_p2 = ap_const_lv1_0)))) then 
                sample_count_V_new_4_reg_232 <= add_ln870_fu_461_p2;
            end if; 
        end if;
    end process;

    state_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (state_load_load_fu_468_p1 = ap_const_lv2_0) and (reset_read_read_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln1049_fu_660_p2 = ap_const_lv1_1))) then 
                state <= ap_const_lv2_1;
            elsif (((ap_start = ap_const_logic_1) and (grp_fu_374_p2 = ap_const_lv1_1) and (state_load_load_fu_468_p1 = ap_const_lv2_1) and (reset_read_read_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln1049_4_fu_630_p2 = ap_const_lv1_1))) then 
                state <= ap_const_lv2_2;
            elsif (((ap_start = ap_const_logic_1) and (grp_fu_374_p2 = ap_const_lv1_1) and (state_load_load_fu_468_p1 = ap_const_lv2_2) and (reset_read_read_fu_138_p2 = ap_const_lv1_0) and (icmp_ln1049_5_fu_608_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                state <= ap_const_lv2_3;
            elsif ((((ap_start = ap_const_logic_1) and (grp_fu_374_p2 = ap_const_lv1_1) and (state_load_load_fu_468_p1 = ap_const_lv2_1) and (reset_read_read_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln1049_4_fu_630_p2 = ap_const_lv1_0)) or ((ap_start = ap_const_logic_1) and (reset_read_read_fu_138_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln1049_3_reg_784 = ap_const_lv1_1) and (state_load_reg_780 = ap_const_lv2_3) and (reset_read_reg_755 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
                state <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_phi_mux_accumulated_data_V_flag_3_phi_fu_268_p20 = ap_const_lv1_1))) then
                accumulated_data_V <= ap_phi_mux_accumulated_data_V_new_3_phi_fu_305_p20;
                byte_count_V <= ap_phi_mux_byte_count_V_new_3_phi_fu_342_p20;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1065_reg_788 = ap_const_lv1_1) and (icmp_ln1049_3_reg_784 = ap_const_lv1_1) and (state_load_reg_780 = ap_const_lv2_3) and (reset_read_reg_755 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                accumulated_data_V_new_1_reg_208 <= ap_phi_mux_accumulated_data_V_new_0_phi_fu_179_p4;
                byte_count_V_new_1_reg_220 <= ap_phi_mux_byte_count_V_new_0_phi_fu_189_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                current_byte_V_load_reg_759 <= current_byte_V;
                reset_read_reg_755 <= (0=>reset, others=>'-');
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((state_load_load_fu_468_p1 = ap_const_lv2_3) and (reset_read_read_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                icmp_ln1049_3_reg_784 <= grp_fu_374_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_fu_374_p2 = ap_const_lv1_1) and (state_load_load_fu_468_p1 = ap_const_lv2_3) and (reset_read_read_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                icmp_ln1065_reg_788 <= icmp_ln1065_fu_514_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                sample_count_V <= ap_phi_mux_sample_count_V_new_4_phi_fu_236_p20;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((reset_read_read_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                state_load_reg_780 <= state;
            end if;
        end if;
    end process;
    first_bit_preg <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln870_1_fu_536_p2 <= std_logic_vector(unsigned(zext_ln1676_fu_524_p1) + unsigned(zext_ln1676_1_fu_528_p1));
    add_ln870_2_fu_546_p2 <= std_logic_vector(unsigned(zext_ln16_fu_520_p1) + unsigned(zext_ln870_4_fu_532_p1));
    add_ln870_4_fu_596_p2 <= std_logic_vector(unsigned(bit_count_V) + unsigned(ap_const_lv4_1));
    add_ln870_5_fu_488_p2 <= std_logic_vector(unsigned(zext_ln1676_2_fu_476_p1) + unsigned(zext_ln1676_3_fu_480_p1));
    add_ln870_6_fu_498_p2 <= std_logic_vector(unsigned(zext_ln16_1_fu_472_p1) + unsigned(zext_ln870_5_fu_484_p1));
    add_ln870_8_fu_719_p2 <= std_logic_vector(unsigned(byte_count_V) + unsigned(ap_const_lv2_1));
    add_ln870_fu_461_p2 <= std_logic_vector(unsigned(sample_count_V) + unsigned(ap_const_lv5_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_condition_135_assign_proc : process(reset_read_reg_755, state_load_reg_780, icmp_ln1049_3_reg_784, icmp_ln1065_reg_788, ap_CS_fsm_state2)
    begin
                ap_condition_135 <= ((icmp_ln1065_reg_788 = ap_const_lv1_1) and (icmp_ln1049_3_reg_784 = ap_const_lv1_1) and (state_load_reg_780 = ap_const_lv2_3) and (reset_read_reg_755 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_accumulated_data_V_flag_1_phi_fu_200_p4_assign_proc : process(reset_read_reg_755, state_load_reg_780, icmp_ln1049_3_reg_784, icmp_ln1065_reg_788, ap_CS_fsm_state2, accumulated_data_V_flag_1_reg_196)
    begin
        if (((icmp_ln1065_reg_788 = ap_const_lv1_1) and (icmp_ln1049_3_reg_784 = ap_const_lv1_1) and (state_load_reg_780 = ap_const_lv2_3) and (reset_read_reg_755 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_phi_mux_accumulated_data_V_flag_1_phi_fu_200_p4 <= ap_const_lv1_1;
        else 
            ap_phi_mux_accumulated_data_V_flag_1_phi_fu_200_p4 <= accumulated_data_V_flag_1_reg_196;
        end if; 
    end process;


    ap_phi_mux_accumulated_data_V_flag_3_phi_fu_268_p20_assign_proc : process(reset_read_reg_755, state_load_reg_780, icmp_ln1049_3_reg_784, ap_CS_fsm_state2, ap_phi_mux_accumulated_data_V_flag_1_phi_fu_200_p4, accumulated_data_V_flag_3_reg_263)
    begin
        if (((icmp_ln1049_3_reg_784 = ap_const_lv1_1) and (state_load_reg_780 = ap_const_lv2_3) and (reset_read_reg_755 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_phi_mux_accumulated_data_V_flag_3_phi_fu_268_p20 <= ap_phi_mux_accumulated_data_V_flag_1_phi_fu_200_p4;
        else 
            ap_phi_mux_accumulated_data_V_flag_3_phi_fu_268_p20 <= accumulated_data_V_flag_3_reg_263;
        end if; 
    end process;


    ap_phi_mux_accumulated_data_V_new_0_phi_fu_179_p4_assign_proc : process(icmp_ln1049_7_fu_725_p2, ret_cast_fu_706_p3, ap_condition_135)
    begin
        if ((ap_const_boolean_1 = ap_condition_135)) then
            if ((icmp_ln1049_7_fu_725_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_accumulated_data_V_new_0_phi_fu_179_p4 <= ret_cast_fu_706_p3;
            elsif ((icmp_ln1049_7_fu_725_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_accumulated_data_V_new_0_phi_fu_179_p4 <= ap_const_lv16_0;
            else 
                ap_phi_mux_accumulated_data_V_new_0_phi_fu_179_p4 <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_accumulated_data_V_new_0_phi_fu_179_p4 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_phi_mux_accumulated_data_V_new_1_phi_fu_212_p4_assign_proc : process(reset_read_reg_755, state_load_reg_780, icmp_ln1049_3_reg_784, icmp_ln1065_reg_788, ap_phi_mux_accumulated_data_V_new_0_phi_fu_179_p4, ap_CS_fsm_state2, accumulated_data_V_new_1_reg_208)
    begin
        if (((icmp_ln1065_reg_788 = ap_const_lv1_1) and (icmp_ln1049_3_reg_784 = ap_const_lv1_1) and (state_load_reg_780 = ap_const_lv2_3) and (reset_read_reg_755 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_phi_mux_accumulated_data_V_new_1_phi_fu_212_p4 <= ap_phi_mux_accumulated_data_V_new_0_phi_fu_179_p4;
        else 
            ap_phi_mux_accumulated_data_V_new_1_phi_fu_212_p4 <= accumulated_data_V_new_1_reg_208;
        end if; 
    end process;


    ap_phi_mux_accumulated_data_V_new_3_phi_fu_305_p20_assign_proc : process(reset_read_reg_755, state_load_reg_780, icmp_ln1049_3_reg_784, ap_CS_fsm_state2, ap_phi_mux_accumulated_data_V_new_1_phi_fu_212_p4, accumulated_data_V_new_3_reg_300)
    begin
        if (((icmp_ln1049_3_reg_784 = ap_const_lv1_1) and (state_load_reg_780 = ap_const_lv2_3) and (reset_read_reg_755 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_phi_mux_accumulated_data_V_new_3_phi_fu_305_p20 <= ap_phi_mux_accumulated_data_V_new_1_phi_fu_212_p4;
        else 
            ap_phi_mux_accumulated_data_V_new_3_phi_fu_305_p20 <= accumulated_data_V_new_3_reg_300;
        end if; 
    end process;


    ap_phi_mux_byte_count_V_new_0_phi_fu_189_p4_assign_proc : process(icmp_ln1049_7_fu_725_p2, add_ln870_8_fu_719_p2, ap_condition_135)
    begin
        if ((ap_const_boolean_1 = ap_condition_135)) then
            if ((icmp_ln1049_7_fu_725_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_byte_count_V_new_0_phi_fu_189_p4 <= add_ln870_8_fu_719_p2;
            elsif ((icmp_ln1049_7_fu_725_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_byte_count_V_new_0_phi_fu_189_p4 <= ap_const_lv2_0;
            else 
                ap_phi_mux_byte_count_V_new_0_phi_fu_189_p4 <= "XX";
            end if;
        else 
            ap_phi_mux_byte_count_V_new_0_phi_fu_189_p4 <= "XX";
        end if; 
    end process;


    ap_phi_mux_byte_count_V_new_1_phi_fu_224_p4_assign_proc : process(reset_read_reg_755, state_load_reg_780, icmp_ln1049_3_reg_784, icmp_ln1065_reg_788, ap_CS_fsm_state2, ap_phi_mux_byte_count_V_new_0_phi_fu_189_p4, byte_count_V_new_1_reg_220)
    begin
        if (((icmp_ln1065_reg_788 = ap_const_lv1_1) and (icmp_ln1049_3_reg_784 = ap_const_lv1_1) and (state_load_reg_780 = ap_const_lv2_3) and (reset_read_reg_755 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_phi_mux_byte_count_V_new_1_phi_fu_224_p4 <= ap_phi_mux_byte_count_V_new_0_phi_fu_189_p4;
        else 
            ap_phi_mux_byte_count_V_new_1_phi_fu_224_p4 <= byte_count_V_new_1_reg_220;
        end if; 
    end process;


    ap_phi_mux_byte_count_V_new_3_phi_fu_342_p20_assign_proc : process(reset_read_reg_755, state_load_reg_780, icmp_ln1049_3_reg_784, ap_CS_fsm_state2, ap_phi_mux_byte_count_V_new_1_phi_fu_224_p4, byte_count_V_new_3_reg_337)
    begin
        if (((icmp_ln1049_3_reg_784 = ap_const_lv1_1) and (state_load_reg_780 = ap_const_lv2_3) and (reset_read_reg_755 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_phi_mux_byte_count_V_new_3_phi_fu_342_p20 <= ap_phi_mux_byte_count_V_new_1_phi_fu_224_p4;
        else 
            ap_phi_mux_byte_count_V_new_3_phi_fu_342_p20 <= byte_count_V_new_3_reg_337;
        end if; 
    end process;


    ap_phi_mux_sample_count_V_new_4_phi_fu_236_p20_assign_proc : process(reset_read_reg_755, state_load_reg_780, icmp_ln1049_3_reg_784, ap_CS_fsm_state2, sample_count_V_new_4_reg_232)
    begin
        if (((icmp_ln1049_3_reg_784 = ap_const_lv1_1) and (state_load_reg_780 = ap_const_lv2_3) and (reset_read_reg_755 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_phi_mux_sample_count_V_new_4_phi_fu_236_p20 <= ap_const_lv5_0;
        else 
            ap_phi_mux_sample_count_V_new_4_phi_fu_236_p20 <= sample_count_V_new_4_reg_232;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bit_value_fu_562_p2 <= "1" when (unsigned(ones_V_1_fu_556_p2) > unsigned(ap_const_lv3_2)) else "0";

    data_out_assign_proc : process(ap_start, ap_CS_fsm_state1, reset_read_read_fu_138_p2, reset_read_reg_755, state_load_reg_780, icmp_ln1049_3_reg_784, icmp_ln1065_reg_788, ap_CS_fsm_state2, icmp_ln1049_7_fu_725_p2, ret_fu_699_p3)
    begin
        if (((icmp_ln1065_reg_788 = ap_const_lv1_1) and (icmp_ln1049_3_reg_784 = ap_const_lv1_1) and (state_load_reg_780 = ap_const_lv2_3) and (reset_read_reg_755 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln1049_7_fu_725_p2 = ap_const_lv1_1))) then 
            data_out <= ret_fu_699_p3;
        elsif (((ap_start = ap_const_logic_1) and (reset_read_read_fu_138_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_out <= ap_const_lv24_0;
        else 
            data_out <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data_out_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, reset_read_read_fu_138_p2, reset_read_reg_755, state_load_reg_780, icmp_ln1049_3_reg_784, icmp_ln1065_reg_788, ap_CS_fsm_state2, icmp_ln1049_7_fu_725_p2)
    begin
        if ((((ap_start = ap_const_logic_1) and (reset_read_read_fu_138_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln1065_reg_788 = ap_const_lv1_1) and (icmp_ln1049_3_reg_784 = ap_const_lv1_1) and (state_load_reg_780 = ap_const_lv2_3) and (reset_read_reg_755 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln1049_7_fu_725_p2 = ap_const_lv1_1)))) then 
            data_out_ap_vld <= ap_const_logic_1;
        else 
            data_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    first_bit_assign_proc : process(ap_start, ap_CS_fsm_state1, reset_read_read_fu_138_p2, reset_read_reg_755, state_load_load_fu_468_p1, state_load_reg_780, icmp_ln1049_3_reg_784, icmp_ln1065_reg_788, ap_CS_fsm_state2, first_bit_preg, icmp_ln1049_6_fu_714_p2)
    begin
        if (((icmp_ln1065_reg_788 = ap_const_lv1_1) and (icmp_ln1049_3_reg_784 = ap_const_lv1_1) and (state_load_reg_780 = ap_const_lv2_3) and (reset_read_reg_755 = ap_const_lv1_0) and (icmp_ln1049_6_fu_714_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            first_bit <= ap_const_logic_1;
        elsif ((((ap_start = ap_const_logic_1) and (reset_read_read_fu_138_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_start = ap_const_logic_1) and (state_load_load_fu_468_p1 = ap_const_lv2_0) and (reset_read_read_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            first_bit <= ap_const_logic_0;
        else 
            first_bit <= first_bit_preg;
        end if; 
    end process;

    grp_fu_374_p2 <= "1" when (add_ln870_fu_461_p2 = ap_const_lv5_10) else "0";
    grp_fu_379_p3 <= sample_buffer(5 downto 5);
    grp_fu_386_p3 <= sample_buffer(6 downto 6);
    grp_fu_393_p3 <= sample_buffer(7 downto 7);
    grp_fu_400_p3 <= sample_buffer(8 downto 8);
    icmp_ln1049_4_fu_630_p2 <= "1" when (middle_samples_fu_620_p4 = ap_const_lv4_0) else "0";
    icmp_ln1049_5_fu_608_p2 <= "1" when (add_ln870_4_fu_596_p2 = ap_const_lv4_8) else "0";
    icmp_ln1049_6_fu_714_p2 <= "1" when (byte_count_V = ap_const_lv2_0) else "0";
    icmp_ln1049_7_fu_725_p2 <= "1" when (add_ln870_8_fu_719_p2 = ap_const_lv2_3) else "0";
    icmp_ln1049_fu_660_p2 <= "1" when (ret_2_cast5_fu_435_p3 = ap_const_lv8_0) else "0";
    icmp_ln1065_fu_514_p2 <= "1" when (unsigned(ones_V_3_fu_508_p2) > unsigned(ap_const_lv3_2)) else "0";
    middle_samples_fu_620_p4 <= sample_buffer(8 downto 5);
    ones_V_1_fu_556_p2 <= std_logic_vector(unsigned(zext_ln870_1_fu_552_p1) + unsigned(zext_ln870_fu_542_p1));
    ones_V_3_fu_508_p2 <= std_logic_vector(unsigned(zext_ln870_3_fu_504_p1) + unsigned(zext_ln870_2_fu_494_p1));
    or_ln_fu_578_p3 <= (bit_value_fu_562_p2 & r_fu_568_p4);
    r_fu_568_p4 <= current_byte_V(7 downto 1);
    reset_read_read_fu_138_p2 <= (0=>reset, others=>'-');
    ret_2_cast5_fu_435_p3 <= (trunc_ln1528_fu_431_p1 & rx_pin);
    ret_2_cast_cast_fu_447_p3 <= (trunc_ln1528_1_fu_443_p1 & rx_pin);
    ret_cast_fu_706_p3 <= (trunc_ln1528_2_fu_696_p1 & current_byte_V_load_reg_759);
    ret_fu_699_p3 <= (accumulated_data_V & current_byte_V_load_reg_759);
    state_load_load_fu_468_p1 <= state;
    trunc_ln1528_1_fu_443_p1 <= sample_buffer(13 - 1 downto 0);
    trunc_ln1528_2_fu_696_p1 <= accumulated_data_V(8 - 1 downto 0);
    trunc_ln1528_fu_431_p1 <= sample_buffer(7 - 1 downto 0);

    valid_assign_proc : process(ap_start, ap_CS_fsm_state1, reset_read_read_fu_138_p2, reset_read_reg_755, state_load_reg_780, icmp_ln1049_3_reg_784, icmp_ln1065_reg_788, ap_CS_fsm_state2, icmp_ln1049_7_fu_725_p2)
    begin
        if (((icmp_ln1065_reg_788 = ap_const_lv1_1) and (icmp_ln1049_3_reg_784 = ap_const_lv1_1) and (state_load_reg_780 = ap_const_lv2_3) and (reset_read_reg_755 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln1049_7_fu_725_p2 = ap_const_lv1_1))) then 
            valid <= ap_const_logic_1;
        elsif ((((ap_start = ap_const_logic_1) and (reset_read_read_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_start = ap_const_logic_1) and (reset_read_read_fu_138_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            valid <= ap_const_logic_0;
        else 
            valid <= 'X';
        end if; 
    end process;


    valid_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, reset_read_read_fu_138_p2, reset_read_reg_755, state_load_reg_780, icmp_ln1049_3_reg_784, icmp_ln1065_reg_788, ap_CS_fsm_state2, icmp_ln1049_7_fu_725_p2)
    begin
        if ((((ap_start = ap_const_logic_1) and (reset_read_read_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_start = ap_const_logic_1) and (reset_read_read_fu_138_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln1065_reg_788 = ap_const_lv1_1) and (icmp_ln1049_3_reg_784 = ap_const_lv1_1) and (state_load_reg_780 = ap_const_lv2_3) and (reset_read_reg_755 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln1049_7_fu_725_p2 = ap_const_lv1_1)))) then 
            valid_ap_vld <= ap_const_logic_1;
        else 
            valid_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln1676_1_fu_528_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_393_p3),2));
    zext_ln1676_2_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_386_p3),2));
    zext_ln1676_3_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_393_p3),2));
    zext_ln1676_fu_524_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_386_p3),2));
    zext_ln16_1_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_379_p3),2));
    zext_ln16_fu_520_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_379_p3),2));
    zext_ln870_1_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln870_2_fu_546_p2),3));
    zext_ln870_2_fu_494_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln870_5_fu_488_p2),3));
    zext_ln870_3_fu_504_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln870_6_fu_498_p2),3));
    zext_ln870_4_fu_532_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_400_p3),2));
    zext_ln870_5_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_400_p3),2));
    zext_ln870_fu_542_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln870_1_fu_536_p2),3));
end behav;
